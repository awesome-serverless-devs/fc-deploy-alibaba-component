import * as core from '@serverless-devs/core';
import { SlsComponent } from '../component/sls';
import { replaceProjectName } from '../profile';
import { AlicloudClient } from './client';
import { generateResourceName } from '../utils/utils';

const LOGSTROE_NAME_MAX_LENGTH = 64;

export interface LogConfig {
  project: string;
  logstore: string;
  enableRequestMetrics?: boolean;
  enableInstanceMetrics?: boolean;
  logBeginRule?: string;
}

export const generateProjectName = (accountID, region: string) => {
  return `${accountID}-${region}-logproject`;
};

export const generateLogstoreName = (serviceName: string, region: string, accountID: string) => {
  // -20 是因为要抛去生成名称的前缀（fc-service-）和后缀（-logstore）
  if (serviceName.length > (LOGSTROE_NAME_MAX_LENGTH - 20)) {
    return generateResourceName(serviceName, region, accountID);
  }

  const defaultLogstore = `fc-service-${serviceName}-logstore`.toLocaleLowerCase();

  return defaultLogstore;
};


export class AlicloudSls extends AlicloudClient {
  async createDefaultSls(fcServiceName: string): Promise<any> {
    const defaultProject = generateProjectName(this.credentials.AccountID, this.region);
    const defaultLogstore = generateLogstoreName(fcServiceName, this.region, this.credentials.AccountID);
    const defaultDescription = 'Generated by alibaba fc-deploy component';
    const profileOfSls = replaceProjectName(this.serverlessProfile, `${this.serverlessProfile?.project.projectName}-sls-project`);

    const slsComponent = new SlsComponent(profileOfSls, defaultProject, defaultLogstore, this.region, this.credentials, this.curPath, defaultDescription);
    const slsComponentInputs = slsComponent.genComponentInputs('sls');
    const slsComponentIns = await core.load('devsapp/sls');
    await slsComponentIns.create(slsComponentInputs);

    const fcDefault = await core.loadComponent('devsapp/fc-default');
    const deployType = await fcDefault.get({ args: 'deploy-type' });
    if (deployType === 'pulumi') {
      return {
        project: defaultProject,
        logstore: defaultLogstore,
      };
    }
    return {
      project: defaultProject,
      logstore: defaultLogstore,
      enableRequestMetrics: true,
      enableInstanceMetrics: true,
    };
  }
}
