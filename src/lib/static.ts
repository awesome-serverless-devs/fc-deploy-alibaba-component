import * as os from 'os';
import * as path from 'path';

export const FUNCTION_CONF_DEFAULT = {
  description: 'This is default function description by fc-deploy component',
  runtime: 'nodejs10',
  handler: 'index.handler',
  memorySize: 128,
  timeout: 3,
  caPort: 9000,
  instanceConcurrency: 1,
  instanceType: 'e1',
  codeUri: './',
};

export const DEPLOY_SUPPORT_COMMAND = ['all', 'domain', 'service', 'function', 'trigger'];
export const DEPLOY_SUPPORT_CONFIG_ARGS = ['code', 'config'];
export const SUPPORTED_REMOVE_ARGS = ['service', 'function', 'trigger', 'domain'];
export const FC_DEPLOY_CACHE_DIR = path.join(os.homedir(), '.s', 'cache', 'fc-deploy');
export const FC_CODE_CACHE_DIR = path.join(FC_DEPLOY_CACHE_DIR, 'code');
export const FC_NAS_SERVICE_PREFIX = '_FC_NAS_';
export const DESCRIPTION = 'generated by fc-deploy component';

export const FC_DEFAULT_ROLE = 'AliyunFCDefaultRole';
export const FC_DEFAULT_ROLE_POLICY = 'AliyunFCDefaultRolePolicy';
export const FC_DEFAULT_ROLE_POLICY_STATEMENT = [
  {
    Action: [
      'vpc:DescribeVSwitchAttributes',
      'vpc:DescribeVpcAttribute',
    ],
    Resource: '*',
    Effect: 'Allow',
  },
  {
    Action: [
      'ecs:CreateNetworkInterface',
      'ecs:DeleteNetworkInterface',
      'ecs:DescribeNetworkInterfaces',
      'ecs:CreateNetworkInterfacePermission',
      'ecs:DescribeNetworkInterfacePermissions',
      'ecs:DeleteNetworkInterfacePermission',
    ],
    Resource: '*',
    Effect: 'Allow',
  },
  {
    Action: ['log:PostLogStoreLogs'],
    Resource: '*',
    Effect: 'Allow',
  },
  {
    Action: [
      'cr:GetRepository',
      'cr:GetRepositoryTag',
      'cr:GetAuthorizationToken',
      'cr:PullRepository',
      'cr:GetRepoTagManifest',
      'cr:GetArtifactTag',
      'cr:GetInstanceVpcEndpoint',
    ],
    Resource: '*',
    Effect: 'Allow',
  },
  {
    Action: [
      'fc:InvokeFunction',
      'mns:SendMessage',
      'mns:PublishMessage',
      'eventbridge:PutEvents',
      'mq:PUB',
      'mq:OnsInstanceBaseInfo',
    ],
    Resource: '*',
    Effect: 'Allow',
  },
];

export const COMPONENT_HELP_INFO = [
  {
    header: 'fc-deploy component',
    content: 'You can use the component to deploy/remove the serverless application.',
  },
  {
    header: 'Usage',
    content: '$ s <command> <options>',
  },
  {
    header: 'Command List',
    content: [
      { name: 'help', summary: 'Display help information.' },
      { name: 'deploy', summary: 'Deploy alicloud function computer resources.' },
      { name: 'remove', summary: 'Remove alicloud function computer resources.' },
    ],
  },
  {
    header: 'Examples with Yaml',
    content: [
      '$ s {bold deploy} {bold --help}',
      '$ s {bold deploy} {bold --assume-yes}',
      '$ s {bold remove} {underline service} ',
      '$ s {bold help}',
    ],
  },
];

export const DEPLOY_HELP_INFO = [
  {
    header: 'Deploy',
    content: 'Deploy a serverless application.',
  },
  {
    header: 'Usage',
    content: '$ s deploy <options>',
  },
  {
    header: 'Options',
    optionList: [
      {
        name: 'use-remote',
        description: 'Deploy resource using remote config.',
        type: Boolean,
      },
      {
        name: 'use-local',
        description: 'Deploy resource using local config.',
        type: Boolean,
      },
      {
        name: 'push-registry',
        typeLabel: '{underline <registry>}',
        description: 'Specify registry or registry type of the image when use custom container runtime.\nRegistry type includes \'acr-internet\' and \'acr-vpc\'',
      },
    ],
  },
  {
    header: 'Global Options',
    optionList: [
      {
        name: 'assume-yes',
        description: 'Assume that the answer to any question which would be asked is yes.',
        alias: 'y',
        type: Boolean,
      },
      {
        name: 'help',
        description: 'Display help for command.',
        alias: 'h',
        type: Boolean,
      },
    ],
  },
  {
    header: 'Examples with Yaml',
    content: [
      '$ s {bold deploy}',
      '$ s <ProjectName> {bold deploy}',
      '$ s {bold deploy} {underline --use-local}',
      '$ s {bold exec} -- {bold deploy} {underline --use-local}',
      '$ s {bold exec} <ProjectName> -- {bold deploy} {underline --use-local}',
    ],
  },
  {
    header: 'Examples with CLI',
    content: [
      'You can refer to the usage of fc-api and execute [s cli fc-api -h] for help',
    ],
  },
];

export const REMOVE_HELP_INFO = [
  {
    header: 'Remove',
    content: 'Specify RESOURCE to remove it and resource belonging to it.\n' +
'If {bold service} is specified, service and its functions should be removed.\n' +
'If {bold function} is specified, function and its triggers should be removed.\n' +
'If {bold trigger} is specified, you can specify the trigger name to remove the specific trigger or remove all triggers without trigger name.\n' +
'If {bold domain} is specified, you can specify the domain name to remove the specific domain or remove all domains without domain name.',
  },
  {
    header: 'Usage',
    content: '$ s remove <RESOURCE> <options>',
  },
  {
    header: 'Resource',
    optionList: [
      {
        name: 'service',
        description: 'The service resource.',
        type: String,
      },
      {
        name: 'function',
        description: 'The function resource.',
        type: String,
      },
      {
        name: 'trigger',
        description: 'The trigger resource.',
        type: String,
      },
      {
        name: 'domain',
        description: 'The domain resource.',
        type: String,
      },
    ],
  },
  {
    header: 'Options',
    optionList: [
      {
        name: 'name',
        typeLabel: '{underline <name>}',
        description: 'Resource name to be removed, only for trigger/domain resource.',
        alias: '-n',
        type: String,
      },
    ],
  },
  {
    header: 'Global Options',
    optionList: [
      {
        name: 'assume-yes',
        description: 'Assume that the answer to any question which would be asked is yes.',
        alias: 'y',
        type: Boolean,
      },
      {
        name: 'help',
        description: 'Help for rm.',
        alias: 'h',
        type: Boolean,
      },
    ],
  },
  {
    header: 'Examples with Yaml',
    content: [
      '$ s {bold remove}',
      '$ s <ProjectName> {bold remove}',
      '$ s {bold remove} {underline service}',
      '$ s {bold remove} {underline domain} [{bold --name} {underline name}]',
      '$ s exec -- {bold remove} {underline domain} [{bold --name} {underline name}]',
    ],
  },
  {
    header: 'Examples with CLI',
    content: [
      'You can refer to the usage of fc-api and execute [s cli fc-api -h] for help',
    ],
  },
];
